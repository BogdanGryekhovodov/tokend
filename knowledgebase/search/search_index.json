{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Knowledge Base TokenD is a white label platform that consolidates the experience gained by Distributed Lab in building the production-ready tokenization solutions. It allows you to issue, transfer and exchange your assets with high level of privacy, security and auditability while following regulations of your jurisdiction. TokenD is designed for enterprises who are willing to take advantage of tokenization or experiment with the blockchain technology without the need of maintaining the expensive team of blockchain experts and within the shortest time to market. Target Audience TokenD Knowledge Base contains information which is helpful for both developers who are starting to work with TokenD and customers who would like to have deep understanding of the system. Overview TokenD is a highly modular system built using the microservices architecture. All services can be grouped into two sets: The backbone of the network: Core and Horizon modules. Core - replicated state machine that maintains a local copy of a cryptographic ledger and processes transactions against it in consensus with a set of peers. Horizon is the client-facing API server. It acts as the interface between the core and applications that want to access the network. It allows submitting transactions to the network, checking the status of accounts, viewing transaction history. Auxiliary Modules: Payment Services Integration Module, API, Key Server, etc. Interaction with backbone of the network is performed in two ways: read-only requests via REST API and write operations via transaction. Auxillary modules support both read and write operations via REST API. Detailed description of modules is available here .","title":"Knowledge Base"},{"location":"index.html#knowledge-base","text":"TokenD is a white label platform that consolidates the experience gained by Distributed Lab in building the production-ready tokenization solutions. It allows you to issue, transfer and exchange your assets with high level of privacy, security and auditability while following regulations of your jurisdiction. TokenD is designed for enterprises who are willing to take advantage of tokenization or experiment with the blockchain technology without the need of maintaining the expensive team of blockchain experts and within the shortest time to market.","title":"Knowledge Base"},{"location":"index.html#target-audience","text":"TokenD Knowledge Base contains information which is helpful for both developers who are starting to work with TokenD and customers who would like to have deep understanding of the system.","title":"Target Audience"},{"location":"index.html#overview","text":"TokenD is a highly modular system built using the microservices architecture. All services can be grouped into two sets: The backbone of the network: Core and Horizon modules. Core - replicated state machine that maintains a local copy of a cryptographic ledger and processes transactions against it in consensus with a set of peers. Horizon is the client-facing API server. It acts as the interface between the core and applications that want to access the network. It allows submitting transactions to the network, checking the status of accounts, viewing transaction history. Auxiliary Modules: Payment Services Integration Module, API, Key Server, etc. Interaction with backbone of the network is performed in two ways: read-only requests via REST API and write operations via transaction. Auxillary modules support both read and write operations via REST API. Detailed description of modules is available here .","title":"Overview"},{"location":"SUMMARY.html","text":"Table of contents General Overview Architecture Overview Platform Features Tokens Management Tokens Issuance External Systems Interconnection DEX Know Your Customer Atomic Swaps Platform customization and Application development System Requirements Fees Management Limits Management Technical Details Security Accounts Signers Transactions Operations Consensus Dev Tools: Web client reference implementation JS SDK Golang SDK iOS wallet reference implementation Android reference implementation","title":"Table of contents"},{"location":"SUMMARY.html#table-of-contents","text":"General Overview Architecture Overview Platform Features Tokens Management Tokens Issuance External Systems Interconnection DEX Know Your Customer Atomic Swaps Platform customization and Application development System Requirements Fees Management Limits Management Technical Details Security Accounts Signers Transactions Operations Consensus Dev Tools: Web client reference implementation JS SDK Golang SDK iOS wallet reference implementation Android reference implementation","title":"Table of contents"},{"location":"architecture.html","text":"Architecture Core Cluster Min number of instances: 4; Modules: Core, Horizon; Core Core is a replicated state machine that maintains a local copy of a cryptographic ledger and processes transactions against it, in consensus with a set of peers. It implements the federated consensus protocol. It is written in C++11. Requires PostgreSQL database to store most recent state of the ledger; and AWS S3 to store full history of transactions. Horizon Horizon is the client facing API server. It acts as the interface between core and applications that want to access the network. It allows to submit transactions to the network, check the status of accounts, view transaction history. Requires PostgreSQL database to store history of transactions. Horizon is only entrypoint into instance. Payment Services Integration Module (PSIM) Cluster Min number of instances: 2; Modules: deposit, funnel, withdraw. Deposit Deposit is module which monitors state of external system (BTC, ETH blockchains, Banks, Payment Gateway) and reflects deposit operations (using multisignature) into TokenD system. Guaranties that all deposit operations are processed and processed only once. Does not require any additional storage. Requires access to external system (does not require local instance). No publically available entry points. Funnel Funnel is module which is only required for the systems working in BTC, ETH. Monitors state of HD wallets (provided to users to perform deposits) and transfers all available assets to hot or cold wallet (depending on state of the hot wallet); Requires access to external system. In case of BTC and ETH does not require local instance. No publically available entry points. Withdraw Withdraw is module which monitors state of TokenD system and reflects withdrawal operations into external system. Confirmation of withdrawal request and actual transaction into external system are performed using multisig. Guaranties that review of withdrawal operation is atomic. Signature of review of the request and actual withdrawal in case of (BTC and ETH) is performed in two steps. First: agree on approval/rejection of the request and on payload of transaction and submit not signed transaction into Core of TokenD. Second: sign transaction, add signatures into Core of TokenD and confirm request, submit signed transaction into external System. In case of Payment Gateways withdrawal is guaranteed to be atomic by idempotent ID of the request (functionality provided by Payment Gateway). Requires access to external system (does not require local instance). Does not require any additional storage. No publically available entry points. RateSync Cluster Min number of instances: 1; Recommended number of instances: 2; RateSync is module which pulls exchange rates data from External Systems (Poloniex, CoinmarketCap, etc.). Finds consens between providers on current exchange rate and using multisignature sends exchange rates to core of the system. Does not require any additional store; No publically available entry points. API Cluster Min number of instances: 1; Recommended number of instances: 2; API is module which stores users related data: KYC data of the users and project specific data, AccountID-Email linking. Requires S3 to KYC docs storage and Postgres RDS to store KYC data; Has publically available entry point. KeyChain Cluster Min number of instances: 1; Recommended number of instances: 2; KeyChain is module which stores private keys used to encrypt KYC data of the users. Gives keys only to admins or owner of keys based on data retrieved from Horizon. Has publically available entry point. Requires Postgres RDS to store private keys (Completely separate from API); API and KeyChain must be connected to different Horizon-Core pairs. KeyServer Cluster Min number of instances: 1; Recommended number of instances: 2; KeyServer is module which stores client side encrypted private keys of the users. Gives encrypted payload only to users who provided proof of knowing encryption secret, allows to enable 2FA (Google Authenticator). Notificator Cluster Min number of instances: 1; Recommended number of instances: 2; Notificator is middleware module between all modules of the system and external providers (mailgun, twilio, etc.). Ensures delivery of the messages. Has no publically available entry point.Requires Postgres RDS to store already sent messages.","title":"Architecture"},{"location":"architecture.html#architecture","text":"","title":"Architecture"},{"location":"architecture.html#core-cluster","text":"Min number of instances: 4; Modules: Core, Horizon;","title":"Core Cluster"},{"location":"architecture.html#core","text":"Core is a replicated state machine that maintains a local copy of a cryptographic ledger and processes transactions against it, in consensus with a set of peers. It implements the federated consensus protocol. It is written in C++11. Requires PostgreSQL database to store most recent state of the ledger; and AWS S3 to store full history of transactions.","title":"Core"},{"location":"architecture.html#horizon","text":"Horizon is the client facing API server. It acts as the interface between core and applications that want to access the network. It allows to submit transactions to the network, check the status of accounts, view transaction history. Requires PostgreSQL database to store history of transactions. Horizon is only entrypoint into instance.","title":"Horizon"},{"location":"architecture.html#payment-services-integration-module-psim-cluster","text":"Min number of instances: 2; Modules: deposit, funnel, withdraw.","title":"Payment Services Integration Module (PSIM) Cluster"},{"location":"architecture.html#deposit","text":"Deposit is module which monitors state of external system (BTC, ETH blockchains, Banks, Payment Gateway) and reflects deposit operations (using multisignature) into TokenD system. Guaranties that all deposit operations are processed and processed only once. Does not require any additional storage. Requires access to external system (does not require local instance). No publically available entry points.","title":"Deposit"},{"location":"architecture.html#funnel","text":"Funnel is module which is only required for the systems working in BTC, ETH. Monitors state of HD wallets (provided to users to perform deposits) and transfers all available assets to hot or cold wallet (depending on state of the hot wallet); Requires access to external system. In case of BTC and ETH does not require local instance. No publically available entry points.","title":"Funnel"},{"location":"architecture.html#withdraw","text":"Withdraw is module which monitors state of TokenD system and reflects withdrawal operations into external system. Confirmation of withdrawal request and actual transaction into external system are performed using multisig. Guaranties that review of withdrawal operation is atomic. Signature of review of the request and actual withdrawal in case of (BTC and ETH) is performed in two steps. First: agree on approval/rejection of the request and on payload of transaction and submit not signed transaction into Core of TokenD. Second: sign transaction, add signatures into Core of TokenD and confirm request, submit signed transaction into external System. In case of Payment Gateways withdrawal is guaranteed to be atomic by idempotent ID of the request (functionality provided by Payment Gateway). Requires access to external system (does not require local instance). Does not require any additional storage. No publically available entry points.","title":"Withdraw"},{"location":"architecture.html#ratesync-cluster","text":"Min number of instances: 1; Recommended number of instances: 2; RateSync is module which pulls exchange rates data from External Systems (Poloniex, CoinmarketCap, etc.). Finds consens between providers on current exchange rate and using multisignature sends exchange rates to core of the system. Does not require any additional store; No publically available entry points.","title":"RateSync Cluster"},{"location":"architecture.html#api-cluster","text":"Min number of instances: 1; Recommended number of instances: 2; API is module which stores users related data: KYC data of the users and project specific data, AccountID-Email linking. Requires S3 to KYC docs storage and Postgres RDS to store KYC data; Has publically available entry point.","title":"API Cluster"},{"location":"architecture.html#keychain-cluster","text":"Min number of instances: 1; Recommended number of instances: 2; KeyChain is module which stores private keys used to encrypt KYC data of the users. Gives keys only to admins or owner of keys based on data retrieved from Horizon. Has publically available entry point. Requires Postgres RDS to store private keys (Completely separate from API); API and KeyChain must be connected to different Horizon-Core pairs.","title":"KeyChain Cluster"},{"location":"architecture.html#keyserver-cluster","text":"Min number of instances: 1; Recommended number of instances: 2; KeyServer is module which stores client side encrypted private keys of the users. Gives encrypted payload only to users who provided proof of knowing encryption secret, allows to enable 2FA (Google Authenticator).","title":"KeyServer Cluster"},{"location":"architecture.html#notificator-cluster","text":"Min number of instances: 1; Recommended number of instances: 2; Notificator is middleware module between all modules of the system and external providers (mailgun, twilio, etc.). Ensures delivery of the messages. Has no publically available entry point.Requires Postgres RDS to store already sent messages.","title":"Notificator Cluster"},{"location":"coming_soon.html","text":"Coming Soon Detailed description of this section will be provided by 01/09/2018. If you have any questions, do not hesitate to contact dh@distributedlab.com","title":"Coming Soon"},{"location":"coming_soon.html#coming-soon","text":"Detailed description of this section will be provided by 01/09/2018. If you have any questions, do not hesitate to contact dh@distributedlab.com","title":"Coming Soon"},{"location":"features/atomic_swaps.html","text":"Atomic Swaps Atomic Swaps feature allows users to easily exchange tokens issued in the TokenD system with any other asset managed in external system. Such approach is highly useful for use cases where deposit of external system assets are not desirable due to legal limitations or UX requirements. Flow described in this document requires intermediate trusted entity, which will send confirmations of transfer in external system to the TokenD system. Token issuer creates request to sell tokens using ManageASSellRequest . Specifying amount, token, price and identifier in external system. Amount of tokens specified in the request is locked on token issuer balance. Token issuer is able to cancel this request at any moment. User willing to purchase token creates request specifying amount of tokens to be brought using CreateASBuyRequest . Corresponding amount of tokens is locked (locking period can be specified by admin of the system using ManageKeyValueOp ). Unique identifier is set for the request, which can be used to link transfer in external system with request in TokenD. User performs transfer in external system specifying unique identifier of the request. (For systems, which use acquiring provider this step can be performed without need to provide user with ID of the request) Intermediate system monitors requests from TokenD system using /request . In case of corresponding transfer in external system, this module approves the request and corresponding amount of tokens is transferred to the user via ReviewRequestOp . This module is also responsible for rejections of the request in case of expiration. User is able to see purchased token in her account.","title":"Atomic Swaps"},{"location":"features/atomic_swaps.html#atomic-swaps","text":"Atomic Swaps feature allows users to easily exchange tokens issued in the TokenD system with any other asset managed in external system. Such approach is highly useful for use cases where deposit of external system assets are not desirable due to legal limitations or UX requirements. Flow described in this document requires intermediate trusted entity, which will send confirmations of transfer in external system to the TokenD system. Token issuer creates request to sell tokens using ManageASSellRequest . Specifying amount, token, price and identifier in external system. Amount of tokens specified in the request is locked on token issuer balance. Token issuer is able to cancel this request at any moment. User willing to purchase token creates request specifying amount of tokens to be brought using CreateASBuyRequest . Corresponding amount of tokens is locked (locking period can be specified by admin of the system using ManageKeyValueOp ). Unique identifier is set for the request, which can be used to link transfer in external system with request in TokenD. User performs transfer in external system specifying unique identifier of the request. (For systems, which use acquiring provider this step can be performed without need to provide user with ID of the request) Intermediate system monitors requests from TokenD system using /request . In case of corresponding transfer in external system, this module approves the request and corresponding amount of tokens is transferred to the user via ReviewRequestOp . This module is also responsible for rejections of the request in case of expiration. User is able to see purchased token in her account.","title":"Atomic Swaps"},{"location":"features/customization.html","text":"Platform customization and Application development TokenD is a highly flexible and configurable system that greatly facilitates the implementation of various use cases by the team that shouldn\u2019t obligingly have any experience in building the so-called DApps (Decentralized Applications). Most customizations for developing MVP solutions do not require any changes to the core of the system, which significantly reduces time to market and at the same time provides high level of security. Data agnostic approach allows to securely exchange custom data without the need to introduce these changes to the core module. In case of a custom KYC flow, MVP development team will only have to update client and admin facing applications, and in case of integration with external KYC processor \u2013 an auxiliary module to connect two systems. TokenD provides various sets of highly configurable tools. It makes it possible to change the behaviour and properties of tokens, token pairs, issuance, and deposit flows with few API calls or through the TokenD Admin Panel. Intuitive REST API, SDKs and reference implementations of various modules, mobile wallets, and web applications significantly reduce the amount of resources needed to train a team with no experience in the development of blockchain applications.","title":"Platform customization and Application development"},{"location":"features/customization.html#platform-customization-and-application-development","text":"TokenD is a highly flexible and configurable system that greatly facilitates the implementation of various use cases by the team that shouldn\u2019t obligingly have any experience in building the so-called DApps (Decentralized Applications). Most customizations for developing MVP solutions do not require any changes to the core of the system, which significantly reduces time to market and at the same time provides high level of security. Data agnostic approach allows to securely exchange custom data without the need to introduce these changes to the core module. In case of a custom KYC flow, MVP development team will only have to update client and admin facing applications, and in case of integration with external KYC processor \u2013 an auxiliary module to connect two systems. TokenD provides various sets of highly configurable tools. It makes it possible to change the behaviour and properties of tokens, token pairs, issuance, and deposit flows with few API calls or through the TokenD Admin Panel. Intuitive REST API, SDKs and reference implementations of various modules, mobile wallets, and web applications significantly reduce the amount of resources needed to train a team with no experience in the development of blockchain applications.","title":"Platform customization and Application development"},{"location":"features/dex.html","text":"Decentralized Exchange* In addition to supporting the issuing and movement of tokens, the TokenD system also allows to easily exchange them. Its ledger stores both balances held by user accounts and offers that user accounts make to buy or sell assets. Admin is able to manage if certain token pair is tradable. What is more it's also possible to specify restrictions on asset pair price (see MANAGE_ASSET_PAIR_OP for more details). Beside regular limit orders TokenD also provides crowdfunding tools, which allow token issuer to specify time period, price, soft and hardcap of the particular campaign. Note : Detailed description of this section will be provided by 01/09/2018. If you have any questions, do not hesitate to contact dh@distributedlab.com","title":"Decentralized Exchange*"},{"location":"features/dex.html#decentralized-exchange","text":"In addition to supporting the issuing and movement of tokens, the TokenD system also allows to easily exchange them. Its ledger stores both balances held by user accounts and offers that user accounts make to buy or sell assets. Admin is able to manage if certain token pair is tradable. What is more it's also possible to specify restrictions on asset pair price (see MANAGE_ASSET_PAIR_OP for more details). Beside regular limit orders TokenD also provides crowdfunding tools, which allow token issuer to specify time period, price, soft and hardcap of the particular campaign. Note : Detailed description of this section will be provided by 01/09/2018. If you have any questions, do not hesitate to contact dh@distributedlab.com","title":"Decentralized Exchange*"},{"location":"features/exsys_connection.html","text":"External Systems Interconnection TokenD provides a consistent sequence of all operations occurring in the system. It can be used to easily integrate various sets of event tracking tools, CRMs, ERPs, and SCMs. Each operation also includes a set of changes applied to the ledger. They allow to easily calculate a partial state of the ledger at a specific moment in time. It can be used by the off-chain applications to calculate interest or demurrage, and perform real-time audit. What is more, TokenD system has convenient methods to integrate external payment systems (Core Banking, Fiat Payment Gateways, Cryptocurrency Networks). TokenD on the blockchain level ensures that there is no double spending on withdrawal and each issuance operation corresponds to one deposit operation in the external system. Reference implementation of integrations with popular cryptocurrencies and fiat payment processors and intuitive REST API will significantly reduce the time needed for custom integration. General Deposit Flow High level description of deposit flow. For more details see: BTC Family Flow ETH Flow ERC20 Flow Preparations Admin of the system have created token which represents asset from external system; Admin of the system have assigned specific external system ID . Which will be used to link asset in the TokenD system and external system asset; For more details on how to perform this step see MANAGE_ASSET Admin of the system generates set of address (identifiers) of the external system, which will allow automated module to link transfer performed in external system to user account in TokenD system; Admin submits set of generated address to the core of the system with external system ID selected on second step using operation MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY Admin specifies expiration period of the external system account id using operation MANAGE_KEY_VALUE Flow User binds external system account id using BIND_EXTERNAL_SYSTEM_ACCOUNT_ID ; User initiates transfer in external system to specified account id; Automated module deposit monitors the external system for new incoming transfer. If new one is confirmed, deposit crafts TokenD create issuance request transaction with corresponding details, unique reference of the deposit and null tasks, signs it and sends to core ; core creates an issuance request with default tasks taken from KeyValue table. Assume that the value of tasks is DEPOSIT_VERIFY ; User is now able to see deposit operation in TokenD system; deposit_verify retrieves request from core , finds the corresponding transfer in the external system, ensures that they are matching and submits the transaction, that removes DEPOSIT_VERIFY flag, to TokenD; While transaction being processed, if tasks equal to 0 - core tries to fulfill issuance request. If the amount for issuance is insufficient, core will set INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT flag in tasks bitmask. If asset to be issued has policy ISSUANCE_MANUAL_REVIEW_REQUIRED , core will set ISSUANCE_MANUAL_REVIEW_REQUIRED flag in tasks bitmask. The request will be fulfilled iff tasks equal to 0 after review. funnel module monitors state of external system; on new incoming transfer if total amount of funds does not exceeds threshold performs transfer to Hot Wallet otherwise to Cold Wallet; Examples of audit log Example of operation sequence: { \"_links\": { \"self\": { \"href\": \"https://api.alice.tokend.io/v2/transactions?order=asc\\u0026limit=1\\u0026cursor=\" }, \"next\": { \"href\": \"https://api.alice.tokend.io/v2/transactions?order=asc\\u0026limit=1\\u0026cursor=437197605965824\" }, \"prev\": { \"href\": \"https://api.alice.tokend.io/v2/transactions?order=desc\\u0026limit=1\\u0026cursor=437197605965824\" } }, \"_embedded\": { \"meta\": { \"latest_ledger\": { \"sequence\": 101793, \"closed_at\": \"2018-07-26T16:12:23Z\" } }, \"records\": [ { \"id\": \"8e9a121e63f86a1dad1971c1234a2b1b14cba88f567d4e24b951e5cc022177bb\", \"paging_token\": \"437197605965824\", \"hash\": \"8e9a121e63f86a1dad1971c1234a2b1b14cba88f567d4e24b951e5cc022177bb\", \"created_at\": \"2018-07-26T16:12:23Z\", \"ledger_seq\": 101793, \"envelope_xdr\": \"AAAAADotpAhI0YfGM89lMNDwuqh4/iE1R7nomm+ONx/1HTwMD5QsVK3lcBAAAAAAAAAAAAAAAABbYx9SAAAAAAAAAAEAAAAAAAAAAAAAAAAg6gq4ST/s/jrpkuotARntr+n98XSpVtJrryDUw+hiqAAAAAChiudBUvVtcQPUGvrosOXz6kOrnRbZOatzlp3NGbIOpgAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAfUdPAwAAABAR2KrbJ2OZ5TIWZL5p095XFm8NXFY8k13X4roBvZpa3kJ7bG2L/pHVneVj0dGtULuvOqJUHl7odWWUzhdACMRBA==\", \"result_xdr\": \"AAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAIAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAABAAAAIjFBTVk1dkFONU1mVnF0cXVRZFdSdDdEdlpWQXF1WURXN3AAAAAAAAAAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAACAAAAKjB4YjYwNjEwOTYwNDBhMDU1ZTg5MjNlZDIyRjUxMzU1YTE1NjYzQzhCNQAAAAAAAAAAAAAAAAAA\", \"changes\": [ { \"effect\": 0, \"entry_type\": 16, \"payload\": \"AAGNoQAAABAAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAABAAAAIjFBTVk1dkFONU1mVnF0cXVRZFdSdDdEdlpWQXF1WURXN3AAAAAAAAAAAAAA\" }, { \"effect\": 0, \"entry_type\": 16, \"payload\": \"AAGNoQAAABAAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAACAAAAKjB4YjYwNjEwOTYwNDBhMDU1ZTg5MjNlZDIyRjUxMzU1YTE1NjYzQzhCNQAAAAAAAAAAAAA=\" }, { \"effect\": 0, \"entry_type\": 0, \"payload\": \"AAGNoQAAAAAAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAAAoYrnQVL1bXED1Br66LDl8+pDq50W2Tmrc5adzRmyDqYBAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAA=\" }, { \"effect\": 0, \"entry_type\": 9, \"payload\": \"AAGNoQAAAAkAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\" } ] } ] } } Example of parsed transaction envelope { \"tx\":{ \"sourceAccount\":\"GA5C3JAIJDIYPRRTZ5STBUHQXKUHR7RBGVD3T2E2N6HDOH7VDU6AYJOR\", \"salt\":1122570949328465936, \"timeBounds\":{ \"maxTime\":1533222738 }, \"memo\":{ }, \"operations\":[ { \"body\":{ \"createAccountOp\":{ \"destination\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"recoveryKey\":\"GCQYVZ2BKL2W24ID2QNPV2FQ4XZ6UQ5LTULNSONLOOLJ3TIZWIHKNMH2\", \"accountType\":{ \"int\":5, \"string\":\"not_verified\" }, \"ext\":{ } } } } ], \"ext\":{ } }, \"signatures\":[ { \"hint\":[ 245, 29, 60, 12 ], \"signature\":\"R2KrbJ2OZ5TIWZL5p095XFm8NXFY8k13X4roBvZpa3kJ7bG2L/pHVneVj0dGtULuvOqJUHl7odWWUzhdACMRBA==\" } ] } Example of parsed transaction result { \"result\":{ \"results\":[ { \"tr\":{ \"createAccountResult\":{ \"success\":{ \"externalSystemIDs\":[ { \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"externalSystemType\":{ \"int\":1, \"string\":\"bitcoin\" }, \"data\":\"1AMY5vAN5MfVqtquQdWRt7DvZVAquYDW7p\", \"ext\":{ } }, { \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"externalSystemType\":{ \"int\":2, \"string\":\"ethereum\" }, \"data\":\"0xb6061096040a055e8923ed22F51355a15663C8B5\", \"ext\":{ } } ], \"ext\":{ } } } } } ] }, \"ext\":{ } } Example of parsed transaciton meta { \"operations\":[ { \"changes\":[ { \"created\":{ \"lastModifiedLedgerSeq\":101793, \"data\":{ \"type\":{ \"int\":16, \"string\":\"external_system_account_id\" }, \"externalSystemAccountID\":{ \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"externalSystemType\":{ \"int\":1, \"string\":\"bitcoin\" }, \"data\":\"1AMY5vAN5MfVqtquQdWRt7DvZVAquYDW7p\", \"ext\":{ } } }, \"ext\":{ } } }, { \"created\":{ \"lastModifiedLedgerSeq\":101793, \"data\":{ \"type\":{ \"int\":16, \"string\":\"external_system_account_id\" }, \"externalSystemAccountID\":{ \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"externalSystemType\":{ \"int\":2, \"string\":\"ethereum\" }, \"data\":\"0xb6061096040a055e8923ed22F51355a15663C8B5\", \"ext\":{ } } }, \"ext\":{ } } }, { \"created\":{ \"lastModifiedLedgerSeq\":101793, \"data\":{ \"account\":{ \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"recoveryID\":\"GCQYVZ2BKL2W24ID2QNPV2FQ4XZ6UQ5LTULNSONLOOLJ3TIZWIHKNMH2\", \"thresholds\":[ 1, 0, 0, 0 ], \"accountType\":{ \"int\":5, \"string\":\"not_verified\" }, \"ext\":{ } } }, \"ext\":{ } } }, { \"created\":{ \"lastModifiedLedgerSeq\":101793, \"data\":{ \"type\":{ \"int\":9, \"string\":\"statistics\" }, \"stats\":{ \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"ext\":{ } } }, \"ext\":{ } } } ] } ] }","title":"External Systems Interconnection"},{"location":"features/exsys_connection.html#external-systems-interconnection","text":"TokenD provides a consistent sequence of all operations occurring in the system. It can be used to easily integrate various sets of event tracking tools, CRMs, ERPs, and SCMs. Each operation also includes a set of changes applied to the ledger. They allow to easily calculate a partial state of the ledger at a specific moment in time. It can be used by the off-chain applications to calculate interest or demurrage, and perform real-time audit. What is more, TokenD system has convenient methods to integrate external payment systems (Core Banking, Fiat Payment Gateways, Cryptocurrency Networks). TokenD on the blockchain level ensures that there is no double spending on withdrawal and each issuance operation corresponds to one deposit operation in the external system. Reference implementation of integrations with popular cryptocurrencies and fiat payment processors and intuitive REST API will significantly reduce the time needed for custom integration.","title":"External Systems Interconnection"},{"location":"features/exsys_connection.html#general-deposit-flow","text":"High level description of deposit flow. For more details see: BTC Family Flow ETH Flow ERC20 Flow","title":"General Deposit Flow"},{"location":"features/exsys_connection.html#preparations","text":"Admin of the system have created token which represents asset from external system; Admin of the system have assigned specific external system ID . Which will be used to link asset in the TokenD system and external system asset; For more details on how to perform this step see MANAGE_ASSET Admin of the system generates set of address (identifiers) of the external system, which will allow automated module to link transfer performed in external system to user account in TokenD system; Admin submits set of generated address to the core of the system with external system ID selected on second step using operation MANAGE_EXTERNAL_SYSTEM_ACCOUNT_ID_POOL_ENTRY Admin specifies expiration period of the external system account id using operation MANAGE_KEY_VALUE","title":"Preparations"},{"location":"features/exsys_connection.html#flow","text":"User binds external system account id using BIND_EXTERNAL_SYSTEM_ACCOUNT_ID ; User initiates transfer in external system to specified account id; Automated module deposit monitors the external system for new incoming transfer. If new one is confirmed, deposit crafts TokenD create issuance request transaction with corresponding details, unique reference of the deposit and null tasks, signs it and sends to core ; core creates an issuance request with default tasks taken from KeyValue table. Assume that the value of tasks is DEPOSIT_VERIFY ; User is now able to see deposit operation in TokenD system; deposit_verify retrieves request from core , finds the corresponding transfer in the external system, ensures that they are matching and submits the transaction, that removes DEPOSIT_VERIFY flag, to TokenD; While transaction being processed, if tasks equal to 0 - core tries to fulfill issuance request. If the amount for issuance is insufficient, core will set INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT flag in tasks bitmask. If asset to be issued has policy ISSUANCE_MANUAL_REVIEW_REQUIRED , core will set ISSUANCE_MANUAL_REVIEW_REQUIRED flag in tasks bitmask. The request will be fulfilled iff tasks equal to 0 after review. funnel module monitors state of external system; on new incoming transfer if total amount of funds does not exceeds threshold performs transfer to Hot Wallet otherwise to Cold Wallet;","title":"Flow"},{"location":"features/exsys_connection.html#examples-of-audit-log","text":"Example of operation sequence: { \"_links\": { \"self\": { \"href\": \"https://api.alice.tokend.io/v2/transactions?order=asc\\u0026limit=1\\u0026cursor=\" }, \"next\": { \"href\": \"https://api.alice.tokend.io/v2/transactions?order=asc\\u0026limit=1\\u0026cursor=437197605965824\" }, \"prev\": { \"href\": \"https://api.alice.tokend.io/v2/transactions?order=desc\\u0026limit=1\\u0026cursor=437197605965824\" } }, \"_embedded\": { \"meta\": { \"latest_ledger\": { \"sequence\": 101793, \"closed_at\": \"2018-07-26T16:12:23Z\" } }, \"records\": [ { \"id\": \"8e9a121e63f86a1dad1971c1234a2b1b14cba88f567d4e24b951e5cc022177bb\", \"paging_token\": \"437197605965824\", \"hash\": \"8e9a121e63f86a1dad1971c1234a2b1b14cba88f567d4e24b951e5cc022177bb\", \"created_at\": \"2018-07-26T16:12:23Z\", \"ledger_seq\": 101793, \"envelope_xdr\": \"AAAAADotpAhI0YfGM89lMNDwuqh4/iE1R7nomm+ONx/1HTwMD5QsVK3lcBAAAAAAAAAAAAAAAABbYx9SAAAAAAAAAAEAAAAAAAAAAAAAAAAg6gq4ST/s/jrpkuotARntr+n98XSpVtJrryDUw+hiqAAAAAChiudBUvVtcQPUGvrosOXz6kOrnRbZOatzlp3NGbIOpgAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAfUdPAwAAABAR2KrbJ2OZ5TIWZL5p095XFm8NXFY8k13X4roBvZpa3kJ7bG2L/pHVneVj0dGtULuvOqJUHl7odWWUzhdACMRBA==\", \"result_xdr\": \"AAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAIAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAABAAAAIjFBTVk1dkFONU1mVnF0cXVRZFdSdDdEdlpWQXF1WURXN3AAAAAAAAAAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAACAAAAKjB4YjYwNjEwOTYwNDBhMDU1ZTg5MjNlZDIyRjUxMzU1YTE1NjYzQzhCNQAAAAAAAAAAAAAAAAAA\", \"changes\": [ { \"effect\": 0, \"entry_type\": 16, \"payload\": \"AAGNoQAAABAAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAABAAAAIjFBTVk1dkFONU1mVnF0cXVRZFdSdDdEdlpWQXF1WURXN3AAAAAAAAAAAAAA\" }, { \"effect\": 0, \"entry_type\": 16, \"payload\": \"AAGNoQAAABAAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAACAAAAKjB4YjYwNjEwOTYwNDBhMDU1ZTg5MjNlZDIyRjUxMzU1YTE1NjYzQzhCNQAAAAAAAAAAAAA=\" }, { \"effect\": 0, \"entry_type\": 0, \"payload\": \"AAGNoQAAAAAAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAAAoYrnQVL1bXED1Br66LDl8+pDq50W2Tmrc5adzRmyDqYBAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAA=\" }, { \"effect\": 0, \"entry_type\": 9, \"payload\": \"AAGNoQAAAAkAAAAAIOoKuEk/7P466ZLqLQEZ7a/p/fF0qVbSa68g1MPoYqgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=\" } ] } ] } } Example of parsed transaction envelope { \"tx\":{ \"sourceAccount\":\"GA5C3JAIJDIYPRRTZ5STBUHQXKUHR7RBGVD3T2E2N6HDOH7VDU6AYJOR\", \"salt\":1122570949328465936, \"timeBounds\":{ \"maxTime\":1533222738 }, \"memo\":{ }, \"operations\":[ { \"body\":{ \"createAccountOp\":{ \"destination\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"recoveryKey\":\"GCQYVZ2BKL2W24ID2QNPV2FQ4XZ6UQ5LTULNSONLOOLJ3TIZWIHKNMH2\", \"accountType\":{ \"int\":5, \"string\":\"not_verified\" }, \"ext\":{ } } } } ], \"ext\":{ } }, \"signatures\":[ { \"hint\":[ 245, 29, 60, 12 ], \"signature\":\"R2KrbJ2OZ5TIWZL5p095XFm8NXFY8k13X4roBvZpa3kJ7bG2L/pHVneVj0dGtULuvOqJUHl7odWWUzhdACMRBA==\" } ] } Example of parsed transaction result { \"result\":{ \"results\":[ { \"tr\":{ \"createAccountResult\":{ \"success\":{ \"externalSystemIDs\":[ { \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"externalSystemType\":{ \"int\":1, \"string\":\"bitcoin\" }, \"data\":\"1AMY5vAN5MfVqtquQdWRt7DvZVAquYDW7p\", \"ext\":{ } }, { \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"externalSystemType\":{ \"int\":2, \"string\":\"ethereum\" }, \"data\":\"0xb6061096040a055e8923ed22F51355a15663C8B5\", \"ext\":{ } } ], \"ext\":{ } } } } } ] }, \"ext\":{ } } Example of parsed transaciton meta { \"operations\":[ { \"changes\":[ { \"created\":{ \"lastModifiedLedgerSeq\":101793, \"data\":{ \"type\":{ \"int\":16, \"string\":\"external_system_account_id\" }, \"externalSystemAccountID\":{ \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"externalSystemType\":{ \"int\":1, \"string\":\"bitcoin\" }, \"data\":\"1AMY5vAN5MfVqtquQdWRt7DvZVAquYDW7p\", \"ext\":{ } } }, \"ext\":{ } } }, { \"created\":{ \"lastModifiedLedgerSeq\":101793, \"data\":{ \"type\":{ \"int\":16, \"string\":\"external_system_account_id\" }, \"externalSystemAccountID\":{ \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"externalSystemType\":{ \"int\":2, \"string\":\"ethereum\" }, \"data\":\"0xb6061096040a055e8923ed22F51355a15663C8B5\", \"ext\":{ } } }, \"ext\":{ } } }, { \"created\":{ \"lastModifiedLedgerSeq\":101793, \"data\":{ \"account\":{ \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"recoveryID\":\"GCQYVZ2BKL2W24ID2QNPV2FQ4XZ6UQ5LTULNSONLOOLJ3TIZWIHKNMH2\", \"thresholds\":[ 1, 0, 0, 0 ], \"accountType\":{ \"int\":5, \"string\":\"not_verified\" }, \"ext\":{ } } }, \"ext\":{ } } }, { \"created\":{ \"lastModifiedLedgerSeq\":101793, \"data\":{ \"type\":{ \"int\":9, \"string\":\"statistics\" }, \"stats\":{ \"accountID\":\"GAQOUCVYJE76Z7R25GJOULIBDHW272P56F2KSVWSNOXSBVGD5BRKRTQJ\", \"ext\":{ } } }, \"ext\":{ } } } ] } ] }","title":"Examples of audit log"},{"location":"features/kyc.html","text":"Know Your Customer TokenD system provides a powerful set of data agnostic tools for easy implementation of custom KYC procedure based on the regulations of a specific jurisdiction. Tasks based approach allows to do various verification steps which could include manual verification as well as integration with external system which can provide sanction lists screening, documents verification, etc. Example of KYC request: { \"id\":\"46\", \"paging_token\":\"46\", \"requestor\":\"GANY5G7RK644BVTMWIPFKFATM7NYAWUXSNI6I5CJIDEN2ORUAADSZ7UF\", \"reviewer\":\"GA4CZMOLWKO6RBKT77V2W4JGKVKYHSUAATVDJYPUYVGTYQ7BLTVH5CBP\", \"reference\":\"3b28a6c3766c6295adad976d349705ef49393fbfdebe4facb5862d2cdfa285d3\", \"reject_reason\":\"\", \"hash\":\"de74625001957dd6f0c161df4ea5d5359f74394125bb1b9547bcdabc70d9d50a\", \"details\":{ \"request_type_i\":9, \"request_type\":\"update_kyc\", \"update_kyc\":{ \"account_to_update_kyc\":\"GANY5G7RK644BVTMWIPFKFATM7NYAWUXSNI6I5CJIDEN2ORUAADSZ7UF\", \"account_type_to_set\":{ \"int\":2, \"string\":\"general\" }, \"kyc_level\":0, \"kyc_data\":{ \"blob_id\":\"CUTGPFUJ6LYTMO4PLVGDDXQZRDZD244TAMZO54Z2DWMSBAMWSTUA\" }, \"all_tasks\":30, \"pending_tasks\":0, \"sequence_number\":0, \"external_details\":[ { } ] } }, \"created_at\":\"2018-06-18T16:33:51Z\", \"updated_at\":\"2018-06-18T16:34:16Z\", \"request_state_i\":3, \"request_state\":\"approved\" } Note : Detailed description of this section will be provided by 01/09/2018. If you have any questions, do not hesitate to contact dh@distributedlab.com","title":"Know Your Customer"},{"location":"features/kyc.html#know-your-customer","text":"TokenD system provides a powerful set of data agnostic tools for easy implementation of custom KYC procedure based on the regulations of a specific jurisdiction. Tasks based approach allows to do various verification steps which could include manual verification as well as integration with external system which can provide sanction lists screening, documents verification, etc. Example of KYC request: { \"id\":\"46\", \"paging_token\":\"46\", \"requestor\":\"GANY5G7RK644BVTMWIPFKFATM7NYAWUXSNI6I5CJIDEN2ORUAADSZ7UF\", \"reviewer\":\"GA4CZMOLWKO6RBKT77V2W4JGKVKYHSUAATVDJYPUYVGTYQ7BLTVH5CBP\", \"reference\":\"3b28a6c3766c6295adad976d349705ef49393fbfdebe4facb5862d2cdfa285d3\", \"reject_reason\":\"\", \"hash\":\"de74625001957dd6f0c161df4ea5d5359f74394125bb1b9547bcdabc70d9d50a\", \"details\":{ \"request_type_i\":9, \"request_type\":\"update_kyc\", \"update_kyc\":{ \"account_to_update_kyc\":\"GANY5G7RK644BVTMWIPFKFATM7NYAWUXSNI6I5CJIDEN2ORUAADSZ7UF\", \"account_type_to_set\":{ \"int\":2, \"string\":\"general\" }, \"kyc_level\":0, \"kyc_data\":{ \"blob_id\":\"CUTGPFUJ6LYTMO4PLVGDDXQZRDZD244TAMZO54Z2DWMSBAMWSTUA\" }, \"all_tasks\":30, \"pending_tasks\":0, \"sequence_number\":0, \"external_details\":[ { } ] } }, \"created_at\":\"2018-06-18T16:33:51Z\", \"updated_at\":\"2018-06-18T16:34:16Z\", \"request_state_i\":3, \"request_state\":\"approved\" } Note : Detailed description of this section will be provided by 01/09/2018. If you have any questions, do not hesitate to contact dh@distributedlab.com","title":"Know Your Customer"},{"location":"features/tokens_issuance.html","text":"Tokens Issuance TokenD system provides easy methods to issue tokens, which can be used to distributed the token or, in case of integration with external system token, manually or automatically process deposit operations. To be able to perform issuance of certain amount of tokens available_for_issuance must be equal or greater then that amount. There are two ways to make tokens available for issuance: specify amount available for issuance on token creation via initialPreissuedAmount ; authorize amount to be issued via CreatePreIssuanceRequestOp operation. CreatePreIssuanceRequestOp To ensure high level of security TokenD allows tokens issuers to easily manage amount of tokens available for issuance in the system. On token creation it is possible to specify preissuedAssetSigner . It is recommended to generate the keypair for preissuedAssetSigner on the offline device. There are only two ways to change this key: by signing corresponding with current preissuedAssetSigner of the token, or by creating fork of the network. PreIssuanceRequest create by SYNDICATE requires additional approval from the admin of the system. Fields of CreatePreIssuanceRequestOp asset \u2014 code of token for which authorization should be performed; amount \u2014 amount of tokens to be authorized to be issued; reference \u2014 unique identifier of the pre issuance request; signature \u2014 signaure of all fields above performed by preissuedAssetSigner . CreationIssuanceRequestOp This operation creates new issuance request. Depending of default tasks specified for that token issuance can be performed right away or it might require additional confirmations from token owner. Note : source account must be the owner of the asset to create issuance request. If source has not provided any tasks, tasks will be taken from the 'KeyValue' table by key ' create_issuance_tasks:%asset code%' (e.g. create_issuance_tasks:BTC ); If tasks bitmask equals 0 , issuance request will be auto-reviewed, else - just created; If the amount for issuance is insufficient or issuance requires manual review, etc., the corresponding flag will be set to allTasks , see Possible allTasks flags ; Fields of CreationIssuanceRequestOp request \u2014 body of the request to be created asset \u2014 token code for which issuance will be performed amount \u2014 amount to be issued receiver \u2014 balance identifier of the receiver of the issuance externalDetails \u2014 details of the issuance (External system id, etc.) reference \u2014 unique identifier of the issuance request allTasks \u2014 bitmask of all tasks which must be completed for the request approval Reserved allTasks flags Name Value Details INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT 1 Set in case of issuance request which amount exceeds available_for_issuance ISSUANCE_MANUAL_REVIEW_REQUIRED 2 Set in case of policy ISSUANCE_MANUAL_REVIEW_REQUIRED been active Possible errors Error Code Description ASSET_NOT_FOUND -1 Asset not found in core DB or asset code is invalid INVALID_AMOUNT -2 Amount in request body is 0 REFERENCE_DUPLICATION -3 Reference is empty or request with such reference already exists NO_COUNTERPARTY -4 Receiver balance not found or has different asset code NOT_AUTHORIZED -5 Operation source account isn't the owner of asset EXCEEDS_MAX_ISSUANCE_AMOUNT -6 Asset max issuance amount is lower than the amount to issue RECEIVER_FULL_LINE -7 Issuance amount + receiver balance amount will overflow uint64 INVALID_EXTERNAL_DETAILS -8 External details size is bigger than 1000 characters or external details is invalid JSON FEE_EXCEEDS_AMOUNT -9 Fee for the issuance request creation is bigger than the amount to issue REQUIRES_KYC -10 Asset requires receiver to have KYC REQUIRES_VERIFICATION -11 Asset requires receiver to be verified Successful result Successful result has the following fields: Request ID : id of the request generated in core. Receiver : id of the balance to recieve issued amount of asset. Fulfilled : if true - request was created and reviewed right away.","title":"Tokens Issuance"},{"location":"features/tokens_issuance.html#tokens-issuance","text":"TokenD system provides easy methods to issue tokens, which can be used to distributed the token or, in case of integration with external system token, manually or automatically process deposit operations. To be able to perform issuance of certain amount of tokens available_for_issuance must be equal or greater then that amount. There are two ways to make tokens available for issuance: specify amount available for issuance on token creation via initialPreissuedAmount ; authorize amount to be issued via CreatePreIssuanceRequestOp operation.","title":"Tokens Issuance"},{"location":"features/tokens_issuance.html#createpreissuancerequestop","text":"To ensure high level of security TokenD allows tokens issuers to easily manage amount of tokens available for issuance in the system. On token creation it is possible to specify preissuedAssetSigner . It is recommended to generate the keypair for preissuedAssetSigner on the offline device. There are only two ways to change this key: by signing corresponding with current preissuedAssetSigner of the token, or by creating fork of the network. PreIssuanceRequest create by SYNDICATE requires additional approval from the admin of the system.","title":"CreatePreIssuanceRequestOp"},{"location":"features/tokens_issuance.html#fields-of-createpreissuancerequestop","text":"asset \u2014 code of token for which authorization should be performed; amount \u2014 amount of tokens to be authorized to be issued; reference \u2014 unique identifier of the pre issuance request; signature \u2014 signaure of all fields above performed by preissuedAssetSigner .","title":"Fields of CreatePreIssuanceRequestOp"},{"location":"features/tokens_issuance.html#creationissuancerequestop","text":"This operation creates new issuance request. Depending of default tasks specified for that token issuance can be performed right away or it might require additional confirmations from token owner. Note : source account must be the owner of the asset to create issuance request. If source has not provided any tasks, tasks will be taken from the 'KeyValue' table by key ' create_issuance_tasks:%asset code%' (e.g. create_issuance_tasks:BTC ); If tasks bitmask equals 0 , issuance request will be auto-reviewed, else - just created; If the amount for issuance is insufficient or issuance requires manual review, etc., the corresponding flag will be set to allTasks , see Possible allTasks flags ;","title":"CreationIssuanceRequestOp"},{"location":"features/tokens_issuance.html#fields-of-creationissuancerequestop","text":"request \u2014 body of the request to be created asset \u2014 token code for which issuance will be performed amount \u2014 amount to be issued receiver \u2014 balance identifier of the receiver of the issuance externalDetails \u2014 details of the issuance (External system id, etc.) reference \u2014 unique identifier of the issuance request allTasks \u2014 bitmask of all tasks which must be completed for the request approval","title":"Fields of CreationIssuanceRequestOp"},{"location":"features/tokens_issuance.html#reserved-alltasks-flags","text":"Name Value Details INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT 1 Set in case of issuance request which amount exceeds available_for_issuance ISSUANCE_MANUAL_REVIEW_REQUIRED 2 Set in case of policy ISSUANCE_MANUAL_REVIEW_REQUIRED been active","title":"Reserved allTasks flags"},{"location":"features/tokens_issuance.html#possible-errors","text":"Error Code Description ASSET_NOT_FOUND -1 Asset not found in core DB or asset code is invalid INVALID_AMOUNT -2 Amount in request body is 0 REFERENCE_DUPLICATION -3 Reference is empty or request with such reference already exists NO_COUNTERPARTY -4 Receiver balance not found or has different asset code NOT_AUTHORIZED -5 Operation source account isn't the owner of asset EXCEEDS_MAX_ISSUANCE_AMOUNT -6 Asset max issuance amount is lower than the amount to issue RECEIVER_FULL_LINE -7 Issuance amount + receiver balance amount will overflow uint64 INVALID_EXTERNAL_DETAILS -8 External details size is bigger than 1000 characters or external details is invalid JSON FEE_EXCEEDS_AMOUNT -9 Fee for the issuance request creation is bigger than the amount to issue REQUIRES_KYC -10 Asset requires receiver to have KYC REQUIRES_VERIFICATION -11 Asset requires receiver to be verified","title":"Possible errors"},{"location":"features/tokens_issuance.html#successful-result","text":"Successful result has the following fields: Request ID : id of the request generated in core. Receiver : id of the balance to recieve issued amount of asset. Fulfilled : if true - request was created and reviewed right away.","title":"Successful result"},{"location":"features/tokens_management.html","text":"Tokens Management TokenD system can be used to track track, hold, and transfer any type of asset: dollars, euros, bitcoin, stocks, gold, and other tokens of value. Any asset on the network can be traded and exchanged with any other. What is more, TokenD supports system tokens created by admin of the system (signer of MASTER account) and user tokens created by accounts with type SYNDICATE . Each user token requires approval from the admin of the system to be created. It's possible to define custom rules for each tokens: should it be transferable; exchangeable with certain tokens; does user needs to complete KYC to be able to hold the token; what limitations for withdrawals, transfers or holdings should be applied; what king of fees should be applied for operations with that token. Token Creation Operation code \u2014 unique identifier of the token; preissuedAssetSigner \u2014 public key of the key pair which is allowed to authorize certain amount of tokens to be available for issuance. This key is only specified on asset creation; signers of the owner of the token are not able to change it. maxIssuanceAmount \u2014 maximum amount of tokens to be available in the system. initialPreissuedAmount \u2014 amount of tokens available for issuance right after creation of the token. policies \u2014 defines the rules of turnover of the token. (Can be update after creation). Following policies are available is the system: TRANSFERABLE \u2014 can be transferred between accounts able to hold this token. BASE_ASSET \u2014 one creation of new account balance for such token will be created automatically. WITHDRAWABLE \u2014 allows to create withdrawal request. REQUIRES_KYC \u2014 only accounts with type GENERAL or SYNDICATE are allowed to hold such token. ISSUANCE_MANUAL_REVIEW_REQUIRED \u2014 issuance of such token requires additional confirmation from the admin. REQUIRES_VERIFICATION \u2014 only accounts with type VERIFIED , GENERAL or SYNDICATE are allowed to hold such token. details \u2014 json object. Can be used to store any additional information for the token. (Can be update after creation). Example of created token { \"code\":\"BTC\", \"owner\":\"GA4CZMOLWKO6RBKT77V2W4JGKVKYHSUAATVDJYPUYVGTYQ7BLTVH5CBP\", \"available_for_issuance\":\"999997769.920000\", \"preissued_asset_signer\":\"GBZHP5662QGSAQITTND2VRMMEH5LCTUMGKQWZGG2BJ54IKWXVVTBT2HD\", \"max_issuance_amount\":\"1000000000.000000\", \"issued\":\"2230.080000\", \"pending_issuance\":\"0.000000\", \"policy\":27, \"policies\":[ { \"name\":\"AssetPolicyTransferable\", \"value\":1 }, { \"name\":\"AssetPolicyBaseAsset\", \"value\":2 }, { \"name\":\"AssetPolicyWithdrawable\", \"value\":8 }, { \"name\":\"AssetPolicyTwoStepWithdrawal\", \"value\":16 } ], \"details\":{ \"external_system_type\":\"\", \"logo\":{ \"key\":\"dpurgh4infnubjhcost7fvpl45vrj3ctszl7z7kqnjk2eyf346b3s6xi\", \"name\":\"Bitcoin.png\", \"type\":\"image/png\" }, \"name\":\"BTC\", \"terms\":{ \"key\":\"\", \"name\":\"\", \"type\":\"\" } } }","title":"Tokens Management"},{"location":"features/tokens_management.html#tokens-management","text":"TokenD system can be used to track track, hold, and transfer any type of asset: dollars, euros, bitcoin, stocks, gold, and other tokens of value. Any asset on the network can be traded and exchanged with any other. What is more, TokenD supports system tokens created by admin of the system (signer of MASTER account) and user tokens created by accounts with type SYNDICATE . Each user token requires approval from the admin of the system to be created. It's possible to define custom rules for each tokens: should it be transferable; exchangeable with certain tokens; does user needs to complete KYC to be able to hold the token; what limitations for withdrawals, transfers or holdings should be applied; what king of fees should be applied for operations with that token.","title":"Tokens Management"},{"location":"features/tokens_management.html#token-creation-operation","text":"code \u2014 unique identifier of the token; preissuedAssetSigner \u2014 public key of the key pair which is allowed to authorize certain amount of tokens to be available for issuance. This key is only specified on asset creation; signers of the owner of the token are not able to change it. maxIssuanceAmount \u2014 maximum amount of tokens to be available in the system. initialPreissuedAmount \u2014 amount of tokens available for issuance right after creation of the token. policies \u2014 defines the rules of turnover of the token. (Can be update after creation). Following policies are available is the system: TRANSFERABLE \u2014 can be transferred between accounts able to hold this token. BASE_ASSET \u2014 one creation of new account balance for such token will be created automatically. WITHDRAWABLE \u2014 allows to create withdrawal request. REQUIRES_KYC \u2014 only accounts with type GENERAL or SYNDICATE are allowed to hold such token. ISSUANCE_MANUAL_REVIEW_REQUIRED \u2014 issuance of such token requires additional confirmation from the admin. REQUIRES_VERIFICATION \u2014 only accounts with type VERIFIED , GENERAL or SYNDICATE are allowed to hold such token. details \u2014 json object. Can be used to store any additional information for the token. (Can be update after creation). Example of created token { \"code\":\"BTC\", \"owner\":\"GA4CZMOLWKO6RBKT77V2W4JGKVKYHSUAATVDJYPUYVGTYQ7BLTVH5CBP\", \"available_for_issuance\":\"999997769.920000\", \"preissued_asset_signer\":\"GBZHP5662QGSAQITTND2VRMMEH5LCTUMGKQWZGG2BJ54IKWXVVTBT2HD\", \"max_issuance_amount\":\"1000000000.000000\", \"issued\":\"2230.080000\", \"pending_issuance\":\"0.000000\", \"policy\":27, \"policies\":[ { \"name\":\"AssetPolicyTransferable\", \"value\":1 }, { \"name\":\"AssetPolicyBaseAsset\", \"value\":2 }, { \"name\":\"AssetPolicyWithdrawable\", \"value\":8 }, { \"name\":\"AssetPolicyTwoStepWithdrawal\", \"value\":16 } ], \"details\":{ \"external_system_type\":\"\", \"logo\":{ \"key\":\"dpurgh4infnubjhcost7fvpl45vrj3ctszl7z7kqnjk2eyf346b3s6xi\", \"name\":\"Bitcoin.png\", \"type\":\"image/png\" }, \"name\":\"BTC\", \"terms\":{ \"key\":\"\", \"name\":\"\", \"type\":\"\" } } }","title":"Token Creation Operation"},{"location":"tech/accounts.html","text":"Accounts Accounts are the central data structure in TokenD. Accounts are identified by a public key and saved in the ledger. Everything else in the ledger, such as assets, offers or KYC data, are owned by a particular account. Accounts are created with the Create Account operation. Account access is controlled by public/private key cryptography. For an account to perform a transaction\u2013e.g., make a payment\u2013the transaction must be signed by the private key that corresponds to that account\u2019s public key. You can also set up more complicated multi-signature schemes for authorizing transactions on an account. Account Fields Accounts have the following fields: AccountID \u2014 the public key that was first used to create the account. You can replace the key used for signing the account\u2019s transactions with a different public key, but the original account ID will always be used to identify the account. recoveryID \u2014 the public key that is used to recover the accounts. Using the private key of this key it's possible to manage all the signers of the account, while signers are not able to change this key. It's possible to change recoveryID only by signing transaction with private key of current recoveryID . Thresholds Operations have varying levels of access. This field specifies thresholds for low-, medium-, and high-access levels, as well as the weight of the master key. For more info, see multi-sig. Signers Used for multi-sig. This field lists other public keys, their weights and policies, which can be used to authorize transactions for this account. blockReasons specifies blocking flags which have been set by the master of the system. Specific block reason disables specific set operations which account is able to perform. Example: SUSPICIOUS_BEHAVIOR disabled all operations for the account, while WITHDRAWAL disables withdrawal operation. accountType defines set of operations which are allowed to be performed by the account. Example: MASTER is able to perform all operations like create account and review asset creation request ; NOT_VERIFIED is not able to perform operations with assets which require KYC to be completed. referrer specifies account which brought user into the system.","title":"Accounts"},{"location":"tech/accounts.html#accounts","text":"Accounts are the central data structure in TokenD. Accounts are identified by a public key and saved in the ledger. Everything else in the ledger, such as assets, offers or KYC data, are owned by a particular account. Accounts are created with the Create Account operation. Account access is controlled by public/private key cryptography. For an account to perform a transaction\u2013e.g., make a payment\u2013the transaction must be signed by the private key that corresponds to that account\u2019s public key. You can also set up more complicated multi-signature schemes for authorizing transactions on an account.","title":"Accounts"},{"location":"tech/accounts.html#account-fields","text":"Accounts have the following fields: AccountID \u2014 the public key that was first used to create the account. You can replace the key used for signing the account\u2019s transactions with a different public key, but the original account ID will always be used to identify the account. recoveryID \u2014 the public key that is used to recover the accounts. Using the private key of this key it's possible to manage all the signers of the account, while signers are not able to change this key. It's possible to change recoveryID only by signing transaction with private key of current recoveryID . Thresholds Operations have varying levels of access. This field specifies thresholds for low-, medium-, and high-access levels, as well as the weight of the master key. For more info, see multi-sig. Signers Used for multi-sig. This field lists other public keys, their weights and policies, which can be used to authorize transactions for this account. blockReasons specifies blocking flags which have been set by the master of the system. Specific block reason disables specific set operations which account is able to perform. Example: SUSPICIOUS_BEHAVIOR disabled all operations for the account, while WITHDRAWAL disables withdrawal operation. accountType defines set of operations which are allowed to be performed by the account. Example: MASTER is able to perform all operations like create account and review asset creation request ; NOT_VERIFIED is not able to perform operations with assets which require KYC to be completed. referrer specifies account which brought user into the system.","title":"Account Fields"},{"location":"tech/buy_as.html","text":"Create Atomic Swap Buy Request This operation allows to create ASBuyRequest . Source account details Property Value Threshold high Allowed account types MASTER , SYNDICATE , GENERAL , NOT_VERIFIED Allowed signer types BALANCE_MANAGER Parameters Parameter Type Description requestID UINT64 Identifier of the request from which base asset will be purchased amount UINT64 Amount of tokens to be brought balanceID BalanceID ID of the balance to which brought tokens will be transferred Possible errors Error Code Description INVALID_AMOUNT -1 Amount in request body is 0 BALANCE_NOT_FOUND -2 Specified balance not found or sender of request is not owner of the balance SWAP_REQUEST_NOT_FOUND -3 Swap request does not exist MALFORMED -4 Operation is invalid in some way PAIR_NOT_TRADED -5 Atomic swaps for specified asset pair is not allowed Successful result Successful result has the following fields: Request ID : id of the request generated in core.","title":"Create Atomic Swap Buy Request"},{"location":"tech/buy_as.html#create-atomic-swap-buy-request","text":"This operation allows to create ASBuyRequest .","title":"Create Atomic Swap Buy Request"},{"location":"tech/buy_as.html#source-account-details","text":"Property Value Threshold high Allowed account types MASTER , SYNDICATE , GENERAL , NOT_VERIFIED Allowed signer types BALANCE_MANAGER","title":"Source account details"},{"location":"tech/buy_as.html#parameters","text":"Parameter Type Description requestID UINT64 Identifier of the request from which base asset will be purchased amount UINT64 Amount of tokens to be brought balanceID BalanceID ID of the balance to which brought tokens will be transferred","title":"Parameters"},{"location":"tech/buy_as.html#possible-errors","text":"Error Code Description INVALID_AMOUNT -1 Amount in request body is 0 BALANCE_NOT_FOUND -2 Specified balance not found or sender of request is not owner of the balance SWAP_REQUEST_NOT_FOUND -3 Swap request does not exist MALFORMED -4 Operation is invalid in some way PAIR_NOT_TRADED -5 Atomic swaps for specified asset pair is not allowed","title":"Possible errors"},{"location":"tech/buy_as.html#successful-result","text":"Successful result has the following fields: Request ID : id of the request generated in core.","title":"Successful result"},{"location":"tech/manage_key_value.html","text":"Manage Key Value The main idea of ManageKeyValueOp is to allow to pass through blockchain values. It can be used to configure core logic or to configure auxiliary modules. Reserved keys Key structure Value type Notes ext_sys_exp_period:<external_system_id> UINT32 Specifies expiration period of external system account ID in seconds. Warning: core does not validate type of this entry; if invalid type will be specified, one day will be used as default expiration period. kyc_lvlup_rules:<current_account_type>:0:<account_type_to_set>:0 UINT32 Used to specify default tasks for updating account from current_account_type to account_type_to_set . issuance_tasks: <asset_code> UINT32 Used to specify default tasks for asset issuance. atomic_swap_exp_period UINT32 Used to specify expiration period of atomic swap request","title":"Manage Key Value"},{"location":"tech/manage_key_value.html#manage-key-value","text":"The main idea of ManageKeyValueOp is to allow to pass through blockchain values. It can be used to configure core logic or to configure auxiliary modules.","title":"Manage Key Value"},{"location":"tech/manage_key_value.html#reserved-keys","text":"Key structure Value type Notes ext_sys_exp_period:<external_system_id> UINT32 Specifies expiration period of external system account ID in seconds. Warning: core does not validate type of this entry; if invalid type will be specified, one day will be used as default expiration period. kyc_lvlup_rules:<current_account_type>:0:<account_type_to_set>:0 UINT32 Used to specify default tasks for updating account from current_account_type to account_type_to_set . issuance_tasks: <asset_code> UINT32 Used to specify default tasks for asset issuance. atomic_swap_exp_period UINT32 Used to specify expiration period of atomic swap request","title":"Reserved keys"},{"location":"tech/review_request_op.html","text":"Review Request This operation allows to approve, reject or permanently reject ReviewableRequest . Parameters Parameter Type Description requestID UINT64 ID of request to be reviewed requestHash Hash Hash of the request to be review action ReviewRequestOpAction: APPROVE , REJECT , PERMANENT_REJECT Action to be performed reason longstring Reject reason. Must be specified for REJECT , PERMANENT_REJECT Possible errors Error Code Description INVALID_REASON -1 reason must be empty if approving and not empty if rejecting INVALID_ACTION -2 HASH_MISMATCHED -3 NOT_FOUND -4 TYPE_MISMATCHED -5 REJECT_NOT_ALLOWED -6 reject not allowed INVALID_EXTERNAL_DETAILS -7 REQUESTOR_IS_BLOCKED -8 PERMANENT_REJECT_NOT_ALLOWED -9 permanent reject not allowed ASSET_ALREADY_EXISTS -20 ASSET_DOES_NOT_EXISTS -21 MAX_ISSUANCE_AMOUNT_EXCEEDED -40 INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT -41 FULL_LINE -42 can't fund balance - total funds exceed UINT64_MAX SYSTEM_TASKS_NOT_ALLOWED -43 Sale creation requests BASE_ASSET_DOES_NOT_EXISTS -50 HARD_CAP_WILL_EXCEED_MAX_ISSUANCE -51 INSUFFICIENT_PREISSUED_FOR_HARD_CAP -52 NON_ZERO_TASKS_TO_REMOVE_NOT_ALLOWED -60 SALE_NOT_FOUND -70 INVALID_SALE_STATE -80 sale state must be \"PROMOTION\" INVALID_SALE_NEW_END_TIME -90 new end time is before start time or current ledger close time AMOUNT_MISMATCHED -101 amount does not match DESTINATION_BALANCE_MISMATCHED -102 invoice balance and payment balance do not match NOT_ALLOWED_ACCOUNT_DESTINATION -103 REQUIRED_SOURCE_PAY_FOR_DESTINATION -104 not allowed shift fee responsibility to destination SOURCE_BALANCE_MISMATCHED -105 source balance must match invoice sender account CONTRACT_NOT_FOUND -106 INVOICE_RECEIVER_BALANCE_LOCK_AMOUNT_OVERFLOW -107 INVOICE_ALREADY_APPROVED -108 PAYMENT_V2_MALFORMED -110 bad input UNDERFUNDED -111 not enough funds in source account LINE_FULL -112 destination would go above their limit DESTINATION_BALANCE_NOT_FOUND -113 BALANCE_ASSETS_MISMATCHED -114 SRC_BALANCE_NOT_FOUND -115 source balance not found REFERENCE_DUPLICATION -116 STATS_OVERFLOW -117 LIMITS_EXCEEDED -118 NOT_ALLOWED_BY_ASSET_POLICY -119 INVALID_DESTINATION_FEE -120 INVALID_DESTINATION_FEE_ASSET -121 destination fee asset must be the same as source balance asset FEE_ASSET_MISMATCHED -122 INSUFFICIENT_FEE_AMOUNT -123 BALANCE_TO_CHARGE_FEE_FROM_NOT_FOUND -124 PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE -125 DESTINATION_ACCOUNT_NOT_FOUND -126","title":"Review Request"},{"location":"tech/review_request_op.html#review-request","text":"This operation allows to approve, reject or permanently reject ReviewableRequest .","title":"Review Request"},{"location":"tech/review_request_op.html#parameters","text":"Parameter Type Description requestID UINT64 ID of request to be reviewed requestHash Hash Hash of the request to be review action ReviewRequestOpAction: APPROVE , REJECT , PERMANENT_REJECT Action to be performed reason longstring Reject reason. Must be specified for REJECT , PERMANENT_REJECT","title":"Parameters"},{"location":"tech/review_request_op.html#possible-errors","text":"Error Code Description INVALID_REASON -1 reason must be empty if approving and not empty if rejecting INVALID_ACTION -2 HASH_MISMATCHED -3 NOT_FOUND -4 TYPE_MISMATCHED -5 REJECT_NOT_ALLOWED -6 reject not allowed INVALID_EXTERNAL_DETAILS -7 REQUESTOR_IS_BLOCKED -8 PERMANENT_REJECT_NOT_ALLOWED -9 permanent reject not allowed ASSET_ALREADY_EXISTS -20 ASSET_DOES_NOT_EXISTS -21 MAX_ISSUANCE_AMOUNT_EXCEEDED -40 INSUFFICIENT_AVAILABLE_FOR_ISSUANCE_AMOUNT -41 FULL_LINE -42 can't fund balance - total funds exceed UINT64_MAX SYSTEM_TASKS_NOT_ALLOWED -43 Sale creation requests BASE_ASSET_DOES_NOT_EXISTS -50 HARD_CAP_WILL_EXCEED_MAX_ISSUANCE -51 INSUFFICIENT_PREISSUED_FOR_HARD_CAP -52 NON_ZERO_TASKS_TO_REMOVE_NOT_ALLOWED -60 SALE_NOT_FOUND -70 INVALID_SALE_STATE -80 sale state must be \"PROMOTION\" INVALID_SALE_NEW_END_TIME -90 new end time is before start time or current ledger close time AMOUNT_MISMATCHED -101 amount does not match DESTINATION_BALANCE_MISMATCHED -102 invoice balance and payment balance do not match NOT_ALLOWED_ACCOUNT_DESTINATION -103 REQUIRED_SOURCE_PAY_FOR_DESTINATION -104 not allowed shift fee responsibility to destination SOURCE_BALANCE_MISMATCHED -105 source balance must match invoice sender account CONTRACT_NOT_FOUND -106 INVOICE_RECEIVER_BALANCE_LOCK_AMOUNT_OVERFLOW -107 INVOICE_ALREADY_APPROVED -108 PAYMENT_V2_MALFORMED -110 bad input UNDERFUNDED -111 not enough funds in source account LINE_FULL -112 destination would go above their limit DESTINATION_BALANCE_NOT_FOUND -113 BALANCE_ASSETS_MISMATCHED -114 SRC_BALANCE_NOT_FOUND -115 source balance not found REFERENCE_DUPLICATION -116 STATS_OVERFLOW -117 LIMITS_EXCEEDED -118 NOT_ALLOWED_BY_ASSET_POLICY -119 INVALID_DESTINATION_FEE -120 INVALID_DESTINATION_FEE_ASSET -121 destination fee asset must be the same as source balance asset FEE_ASSET_MISMATCHED -122 INSUFFICIENT_FEE_AMOUNT -123 BALANCE_TO_CHARGE_FEE_FROM_NOT_FOUND -124 PAYMENT_AMOUNT_IS_LESS_THAN_DEST_FEE -125 DESTINATION_ACCOUNT_NOT_FOUND -126","title":"Possible errors"},{"location":"tech/reviewable_request.html","text":"Reviewable request The reviewable request is an entity, that is used when the user wants to perform an action, which must be applied by admin. Reviewable request fields Reviewable request has the following fields: Request ID : id of the request. Request ID is generating in core during the new reviewable request creation. Hash : hash of the request body. Requestor : the account which has created request. Reject reason : reject reason of the request. If the request is being rejected by admin, reject reason must be specified. Reject reason is an empty string by default. Reviewer : reviewer of the request. Reference : (optional) reference for the request which will act as a unique key for the request (will reject the request with the same reference from same requestor). Created at : when request was created (unix timestamp). Body : a body of the request depends on the reviewable request type. Tasks ext All tasks : bitmask of all tasks which must be completed for the request approval. The value of this field is being set by user or core during the creation of reviewable request. Pending tasks : bitmask of pending tasks which must be completed for the request approval. The value of this field initially equals to All tasks . During the request lifetime, it could be changed by reviewers. If Pending tasks equals 0 - request should be approved. Sequence number : initially equals 0. The value of this field increases, when the request is being rejected. External details : this field is a list of comments added by reviewers during request review.","title":"Reviewable request"},{"location":"tech/reviewable_request.html#reviewable-request","text":"The reviewable request is an entity, that is used when the user wants to perform an action, which must be applied by admin.","title":"Reviewable request"},{"location":"tech/reviewable_request.html#reviewable-request-fields","text":"Reviewable request has the following fields: Request ID : id of the request. Request ID is generating in core during the new reviewable request creation. Hash : hash of the request body. Requestor : the account which has created request. Reject reason : reject reason of the request. If the request is being rejected by admin, reject reason must be specified. Reject reason is an empty string by default. Reviewer : reviewer of the request. Reference : (optional) reference for the request which will act as a unique key for the request (will reject the request with the same reference from same requestor). Created at : when request was created (unix timestamp). Body : a body of the request depends on the reviewable request type. Tasks ext All tasks : bitmask of all tasks which must be completed for the request approval. The value of this field is being set by user or core during the creation of reviewable request. Pending tasks : bitmask of pending tasks which must be completed for the request approval. The value of this field initially equals to All tasks . During the request lifetime, it could be changed by reviewers. If Pending tasks equals 0 - request should be approved. Sequence number : initially equals 0. The value of this field increases, when the request is being rejected. External details : this field is a list of comments added by reviewers during request review.","title":"Reviewable request fields"},{"location":"tech/security.html","text":"Security TokenD uses the Ed25519 algorithm to authorize any write request or read private data. Usage of such cryptographic proof provides high level of security and allows the system to be build in a way where transfer of the secrets is not needed. Thus, an attacker who has access to one of the servers will not be able to change the state of the system or compromise the secrets of users. REST API Request signature implementation is based on IETF HTTP Signatures draft RFC except of implicit headers parameter is not supported, clients must explicitly specify headers used for signing. Only signature algorithm supported is ed25519-sha256 which uses public signer key as keyId. Both Signature and Authorization HTTP authentication schemas are supported. The minimum recommended data to sign is the (request-header) and date. For the following request: GET /users?type=2 HTTP/1.1 Host: api.tokend.io Date: Sun, 05 Jan 2014 21:31:40 GMT Signing string would be: date: Sun, 05 Jan 2018 21:31:40 GMT (request-target): get /users?type=2 For SCDMOOXVNMO6SA22AYUMZDIGLDJMBUTVEGB73FFNTLFJILBJWIU4NQ3D private key gives following signature string: keyId=\"GBLTOG6EJS5OWDNQNSCEAVDNMPBY6F73XZHHKR27YE5AKE23ZZEXOLBK\",algorithm=\"ed25519-sha256\",signature=\"0cvTqLDn+5i8pInkeSR833HrNSMI4xB9m1eN7rofiDVnoutKQJvpwB9hl2GhsMPcMbVXo4beUR96Stf/qU+iAg==\",headers=\"date (request-target)\" Transactions Transactions always need authorization from at least one public key in order to be considered valid. Generally, transactions only need authorization from the public key of the source account. Transaction signatures are created by cryptographically signing the transaction object contents with a secret key. TokenD currently uses the ed25519 signature scheme. A transaction with an attached signature is considered to have authorization from that public key. In two cases, a transaction may need more than one signature. If the transaction has operations that affect more than one account, it will need authorization from every account in question. A transaction will also need additional signatures if the account associated with the transaction has multiple public keys. Thresholds Operations fall under a specific threshold category: low, medium, or high. The threshold for a given level can be set to any number from 0-255. This threshold is the amount of signature weight required to authorize an operation at that level. Let\u2019s say Diyang sets the medium threshold on one of her accounts to 4. If that account submits a transaction that includes a payment operation (medium security), the transaction\u2019s threshold is 4\u2013the signature weights on it need to be greater than or equal to 4 in order to run. If Diyang\u2019s master key\u2013the key corresponding to the public key that identifies the account she owns\u2013has a weight less than 4, she cannot authorize a transaction without other signers. Once the signature threshold is met if there are any leftover signatures then the transaction is regarded as having too many signatures which results in a failed transaction even if the remaining signatures are valid, i.e. for a transaction signed with N signatures, if the threshold is reached using K signatures then the transaction will fail if N > K. Each account can set its own threshold values. By default all thresholds levels are set to 0, and the master key is set to weight 1. The Set Options operation allows you to change the weight of the master key and to add other signing keys with different weights.","title":"Security"},{"location":"tech/security.html#security","text":"TokenD uses the Ed25519 algorithm to authorize any write request or read private data. Usage of such cryptographic proof provides high level of security and allows the system to be build in a way where transfer of the secrets is not needed. Thus, an attacker who has access to one of the servers will not be able to change the state of the system or compromise the secrets of users.","title":"Security"},{"location":"tech/security.html#rest-api","text":"Request signature implementation is based on IETF HTTP Signatures draft RFC except of implicit headers parameter is not supported, clients must explicitly specify headers used for signing. Only signature algorithm supported is ed25519-sha256 which uses public signer key as keyId. Both Signature and Authorization HTTP authentication schemas are supported. The minimum recommended data to sign is the (request-header) and date. For the following request: GET /users?type=2 HTTP/1.1 Host: api.tokend.io Date: Sun, 05 Jan 2014 21:31:40 GMT Signing string would be: date: Sun, 05 Jan 2018 21:31:40 GMT (request-target): get /users?type=2 For SCDMOOXVNMO6SA22AYUMZDIGLDJMBUTVEGB73FFNTLFJILBJWIU4NQ3D private key gives following signature string: keyId=\"GBLTOG6EJS5OWDNQNSCEAVDNMPBY6F73XZHHKR27YE5AKE23ZZEXOLBK\",algorithm=\"ed25519-sha256\",signature=\"0cvTqLDn+5i8pInkeSR833HrNSMI4xB9m1eN7rofiDVnoutKQJvpwB9hl2GhsMPcMbVXo4beUR96Stf/qU+iAg==\",headers=\"date (request-target)\"","title":"REST API"},{"location":"tech/security.html#transactions","text":"Transactions always need authorization from at least one public key in order to be considered valid. Generally, transactions only need authorization from the public key of the source account. Transaction signatures are created by cryptographically signing the transaction object contents with a secret key. TokenD currently uses the ed25519 signature scheme. A transaction with an attached signature is considered to have authorization from that public key. In two cases, a transaction may need more than one signature. If the transaction has operations that affect more than one account, it will need authorization from every account in question. A transaction will also need additional signatures if the account associated with the transaction has multiple public keys.","title":"Transactions"},{"location":"tech/security.html#thresholds","text":"Operations fall under a specific threshold category: low, medium, or high. The threshold for a given level can be set to any number from 0-255. This threshold is the amount of signature weight required to authorize an operation at that level. Let\u2019s say Diyang sets the medium threshold on one of her accounts to 4. If that account submits a transaction that includes a payment operation (medium security), the transaction\u2019s threshold is 4\u2013the signature weights on it need to be greater than or equal to 4 in order to run. If Diyang\u2019s master key\u2013the key corresponding to the public key that identifies the account she owns\u2013has a weight less than 4, she cannot authorize a transaction without other signers. Once the signature threshold is met if there are any leftover signatures then the transaction is regarded as having too many signatures which results in a failed transaction even if the remaining signatures are valid, i.e. for a transaction signed with N signatures, if the threshold is reached using K signatures then the transaction will fail if N > K. Each account can set its own threshold values. By default all thresholds levels are set to 0, and the master key is set to weight 1. The Set Options operation allows you to change the weight of the master key and to add other signing keys with different weights.","title":"Thresholds"},{"location":"tech/sell_as.html","text":"Manage Atomic Swap Sell Request This operation allows to create or cancel ASSellRequest . Source account details Property Value Threshold high Allowed account types MASTER , SYNDICATE , GENERAL , NOT_VERIFIED Allowed signer types BALANCE_MANAGER Parameters Parameter Type Description requestID UINT64 Identifier of the request. 0 to create new one action CREATE , CANCEL Action to be performed against request createBody *CreateASSellRequest Body of the request for creation. Can only be set with CREATE action CreateASSellRequest fields Parameter Type Description amount UINT64 Amount of tokens to be sold balanceID BalanceID ID of the balance from which corresponding amount of tokens will be charged quoteAsset AssetCode Unique identifier of the token to be brought price UINT64 Price per one base token in terms of quote details longstring JSON object with max length of 1000 characters. Can be used to pass additional details like unique identifier of seller in external system Possible errors Error Code Description INVALID_AMOUNT -1 Amount in request body is 0 BALANCE_NOT_FOUND -2 Specified balance not found or sender of request is not owner of the balance UNDERFUNDED -3 not enough funds INVALID_PRICE -4 Price is 0 REQUEST_NOT_FOUND -5 Request with specified ID does not exists (only for CANCEL action) MALFORMED -6 Operation is invalid in some way PAIR_NOT_TRADED -7 Atomic swaps for specified asset pair is not allowed Successful result Successful result has the following fields: Request ID : id of the request generated in core.","title":"Manage Atomic Swap Sell Request"},{"location":"tech/sell_as.html#manage-atomic-swap-sell-request","text":"This operation allows to create or cancel ASSellRequest .","title":"Manage Atomic Swap Sell Request"},{"location":"tech/sell_as.html#source-account-details","text":"Property Value Threshold high Allowed account types MASTER , SYNDICATE , GENERAL , NOT_VERIFIED Allowed signer types BALANCE_MANAGER","title":"Source account details"},{"location":"tech/sell_as.html#parameters","text":"Parameter Type Description requestID UINT64 Identifier of the request. 0 to create new one action CREATE , CANCEL Action to be performed against request createBody *CreateASSellRequest Body of the request for creation. Can only be set with CREATE action","title":"Parameters"},{"location":"tech/sell_as.html#createassellrequest-fields","text":"Parameter Type Description amount UINT64 Amount of tokens to be sold balanceID BalanceID ID of the balance from which corresponding amount of tokens will be charged quoteAsset AssetCode Unique identifier of the token to be brought price UINT64 Price per one base token in terms of quote details longstring JSON object with max length of 1000 characters. Can be used to pass additional details like unique identifier of seller in external system","title":"CreateASSellRequest fields"},{"location":"tech/sell_as.html#possible-errors","text":"Error Code Description INVALID_AMOUNT -1 Amount in request body is 0 BALANCE_NOT_FOUND -2 Specified balance not found or sender of request is not owner of the balance UNDERFUNDED -3 not enough funds INVALID_PRICE -4 Price is 0 REQUEST_NOT_FOUND -5 Request with specified ID does not exists (only for CANCEL action) MALFORMED -6 Operation is invalid in some way PAIR_NOT_TRADED -7 Atomic swaps for specified asset pair is not allowed","title":"Possible errors"},{"location":"tech/sell_as.html#successful-result","text":"Successful result has the following fields: Request ID : id of the request generated in core.","title":"Successful result"},{"location":"tech/signers.html","text":"Signers Signer is the main concept used for authorization. To be able to perform transaction on read private data of particular account from any of the services signature of one of the signers of that account must be provided. Signer Fields pubKey \u2014 public key of the ed25519 key pair. Used as identifier of the signer. weight \u2014 specifies weight of the signer. signerType \u2014 bit mask of signer types; Defines set of operations allowed to be authorized by the signer in name of the account. identity \u2014 identity of the signer. Two signatures created by two different signers with same identity are handled as one. name \u2014 name of the signer.","title":"Signers"},{"location":"tech/signers.html#signers","text":"Signer is the main concept used for authorization. To be able to perform transaction on read private data of particular account from any of the services signature of one of the signers of that account must be provided.","title":"Signers"},{"location":"tech/signers.html#signer-fields","text":"pubKey \u2014 public key of the ed25519 key pair. Used as identifier of the signer. weight \u2014 specifies weight of the signer. signerType \u2014 bit mask of signer types; Defines set of operations allowed to be authorized by the signer in name of the account. identity \u2014 identity of the signer. Two signatures created by two different signers with same identity are handled as one. name \u2014 name of the signer.","title":"Signer Fields"}]}